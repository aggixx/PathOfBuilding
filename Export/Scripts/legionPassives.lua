if not loadStatFile then
	dofile("statdesc.lua")
end
--loadStatFile("stat_descriptions.txt")
loadStatFile("passive_skill_stat_descriptions.txt")

local out = io.open("../Data/3_0/LegionPassives.lua", "w")

local keys = { }
local stats = dat"Stats"
local dat = dat"AlternatePassiveSkills"

local LEGION_PASSIVE_GROUP = 1e9

function stringify(thing)
	if type(thing) == 'string' then
		return thing
	elseif type(thing) == 'table' then
		local s = "{";

		for k,v in pairs(thing) do
			--thing[k] = stringify(v);
			s = s.."\n\t"

			if type(k) == 'number' then
				s = s.."["..k.."] = "
			else
				s = s.."[\""..k.."\"] = "
			end

			if type(v) == 'string' then
				s = s.."\""..stringify(v).."\", "
			else
				if type(v) == "boolean" then
					v = v and "true" or "false"
				end

				val = stringify(v)..", "

				if type(v) == "table" then
					val = string.gsub(val, "\n", "\n\t")
				end

				s = s..val;
			end
		end

		return s.."\n}"
	elseif type(thing) == 'number' then
		return ""..thing;
	end
end 

local data = {};
data.nodes = {};
data.groups = {};

local ksCount = -1;

for i=1,dat.rowCount do
	-- intermediate data
	local inter = {};

	for j=1,#dat.cols-1 do
		local key = dat.spec[j].name
		inter[key] = dat:ReadCell(i, j)
	end

	local t = {};

	-- id
	t.id = inter.Id;
	-- icon
	t.icon = inter.DDSFile;
	-- is keystone
	t.ks = isValueInTable(inter.PassiveType, 4) and true or false

	if t.ks then ksCount = ksCount + 1 end

	-- is notable
	t['not'] = isValueInTable(inter.PassiveType, 3) and true or false
	-- node name
	t.dn = inter.Name;
	-- is "mastery" ??
	t.m = false
	-- self explanatory
	t.isJewelSocket = false
	t.isMultipleChoice = false
	t.isMultipleChoiceOption = false
	t.passivePointsGranted = 0
	-- something to do with tree starting positions
	t.spc = {}
	-- display text TODO
	t.sd = {}

	t.stats = {}

	for idx,statKey in pairs(inter.StatsKeys) do
		local stat = {}
		refRow = statKey._rowIndex
		statId = stats:ReadCell(refRow, 1)
		range = inter["Stat"..idx]

		t.stats[statId] = {
			["min"] = range[1],
			["max"] = range[2],
		}
	end
			
	for _, line in ipairs(describeStats(t.stats)) do
		table.insert(t.sd, line)
	end

	-- TODO node group. everything has a group
	t.g = LEGION_PASSIVE_GROUP
	-- 
	-- group orbit distance
	t.o = t.ks and 4 or 3
	t.oidx = t.ks and ksCount * 3 or math.floor(math.random() * 1e5)
	-- attributes granted 
	t.sa = 0
	t.da = 0
	t.ia = 0
	-- connected nodes
	t.out = {}
	t["in"] = {}
	-- legion flag, so pob knows to handle the data in special ways
	t.legion = true


	data.nodes[t.id] = t;
end

data.groups[LEGION_PASSIVE_GROUP] = {
    ["x"] = -6500,
    ["y"] = -6500,
    ["oo"] = {},
    ["n"] = {}
}

for k,v in pairs(data.nodes) do
	table.insert(data.groups[LEGION_PASSIVE_GROUP].n, k)
end

str = stringify(data)

out:write("-- This file is automatically generated, do not edit!\n-- Item data (c) Grinding Gear Games\n\n")
out:write("return "..str)

out:close()

print("Legion passives exported.")